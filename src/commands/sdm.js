"use strict";

const { MessageEmbed, Util } = require("discord.js");
// Dependencies
let moment = require("moment");

// Utils
let config = require("../utils/configHandler").getConfig();

// Truly random seed, generated by putting trainee in front of vim and tell him to exit
const randomSeed = "AQa0B7HK4vvrBOlaKKplMsKorGhN4gJvOCBWxw531P8uwpeIU3d39ODZ02fbvcxiImOwAOuOtR4eaiPDkyTCbSqzKnaJWqp4AqwxOTMgU2UCPWKIH4WXCQzVq8M7oqWBF32KEAdAoXvAm5o3Wvl4MOwdMJk1LleFjv7mQJizltVw3Y2Tan88uc3JxoJurDTKvxBzRt6H";

// Just for reference, this is how it's supposed to be done:
// const randomSeed = String(require("crypto").randomBytes(200));
// gg @tobi6112

/**
 * Index of Coincedence
 *
 * @param {string} s
 * @returns {number} index
 */
const iocCalculator = function(s){
    let bigrams = new Map();
    let text = s.replace(/\s+/g, "");
    [...text].forEach(c => (bigrams.has(c) ? bigrams.set(c, bigrams.get(c) + 1) : bigrams.set(c, 1)));

    let sum = 0;
    bigrams.forEach(v => (sum += v + (v - 1)));
    return sum / (text.length * (text.length - 1));
};

/**
 * Highly complex and very very secure
 *
 * @param {number} min
 * @param {number} max
 * @param {number} seed
 * @returns {number} random floored number >= min and <= max
 */
const rng = function(min, max, seed){
    let sido = (seed * 9301 + 49297) % 233280;
    let rnd = sido / 233280;
    let disp = Math.abs(Math.sin(sido));

    rnd = rnd + disp - Math.floor(rnd + disp);

    return Math.floor((min || 0) + rnd * ((max || 1) - (min || 0) + 1));
};

const ioc = iocCalculator(randomSeed);

/**
 * Highly complex, secure and optimized decision maker algorithm
 *
 * @param {string} question
 * @param {number} max
 * @returns {number} decision
 */
const secureDecisionMaker = (question, max = 1) => (rng(0, max, (Date.now() * ioc) / iocCalculator(question)));

/**
 * @param {import("discord.js").CommandInteraction} interaction
 * @param {Function} callback
 */
async function handler(interaction, callback) {
    if(interaction.options.has("frage")) {
        let question = Util.cleanContent(interaction.options.get("frage").options.get("question").value, interaction.channel);

        if (!question.endsWith("?")) question += "?";

        const decision = secureDecisionMaker(question);

        let response = new MessageEmbed()
            .setTitle(question)
            .setTimestamp(moment.utc().format())
            .setAuthor(`Secure Decision für ${interaction.user.username}`, interaction.user.displayAvatarURL());

        if(!!decision) {
            response = response.setColor(0x2ecc71)
                .setThumbnail("https://raw.githubusercontent.com/NullDev/CSC-Bot/master/assets/yes.png");
        }
        else {
            response = response.setColor(0xe74c3c)
                .setThumbnail("https://raw.githubusercontent.com/NullDev/CSC-Bot/master/assets/no.png");
        }

        interaction.reply({ embeds: [response]});

        return callback();
    }
    else if(interaction.options.has("auswahl")) {
        const options = [...interaction.options.get("auswahl").options.values()].map(o => Util.cleanContent(o.value, interaction.channel));
        const question = options.reduce((acc, val, idx, arr) => (`${acc}${idx === arr.length - 1 ? " oder " : ", "}${val}`));
        const decision = secureDecisionMaker(question, options.length - 1);

        let response = new MessageEmbed()
            .setTitle(question)
            .setTimestamp(moment.utc().format())
            .setColor(0x9b59b6)
            .setDescription(`Bruder, probier's doch einfach mit ${options[decision]}`)
            .setAuthor(`Secure Decision für ${interaction.user.username}`, interaction.user.displayAvatarURL());

        interaction.reply({ embeds: [response]});

        return callback();
    }

    return callback("Bruder hier ist was schief gegangen, was das?");
}

exports.description = `Macht eine Secure Decision mithilfe eines komplexen, hochoptimierten, Blockchain Algorithmus.\nUsage:\n**ja/nein Frage**\n ${config.bot_settings.prefix.command_prefix}sdm [Hier die Frage]\n\n**Secure Auswahl**\n\n${config.bot_settings.prefix.command_prefix}sdm [Auswahl 1]; [Auswahl 2]`;

/**
 * @type {Record<string, import("../handler/commands.js").CommandDefinition>}
 */
exports.applicationCommands = {
    sdm: {
        handler,
        data: {
            description: "Macht eine Secure Decision mithilfe eines komplexen, hochoptimierten, Blockchain Algorithmus.",
            options: [
                {
                    name: "frage",
                    type: "SUB_COMMAND",
                    description: "Erstellt eine Secure Decision aufgrund einer Fragestellung",
                    options: [
                        {
                            name: "question",
                            type: "STRING",
                            description: "Fragestellung",
                            required: true
                        }
                    ]
                },
                {
                    name: "auswahl",
                    type: "SUB_COMMAND",
                    description: "Erstellt eine Secure Decision anhand einer Auswahl",
                    options: [
                        {
                            name: "s1",
                            type: "STRING",
                            description: "Auswahlelement 1",
                            required: true
                        },
                        {
                            name: "s2",
                            type: "STRING",
                            description: "Auswahlelement 2",
                            required: true
                        },
                        {
                            name: "s3",
                            type: "STRING",
                            description: "Auswahlelement 3"
                        },
                        {
                            name: "s4",
                            type: "STRING",
                            description: "Auswahlelement 4"
                        },
                        {
                            name: "s5",
                            type: "STRING",
                            description: "Auswahlelement 35"
                        },
                        {
                            name: "s6",
                            type: "STRING",
                            description: "Auswahlelement 6"
                        },
                        {
                            name: "s7",
                            type: "STRING",
                            description: "Auswahlelement 7"
                        },
                        {
                            name: "s8",
                            type: "STRING",
                            description: "Auswahlelement 8"
                        },
                        {
                            name: "s9",
                            type: "STRING",
                            description: "Auswahlelement 9"
                        }
                    ]
                }
            ]
        }
    }
};
